<div id="Events" data-tchmi-type="TcHmi.Controls.System.TcHmiContent" data-tchmi-top="0" data-tchmi-left="0" data-tchmi-width="1507" data-tchmi-height="695">

<div data-tchmi-grid-row-index="0" data-tchmi-grid-column-index="0" id="TcHmiGrid_Settings_2" data-tchmi-type="TcHmi.Controls.System.TcHmiGrid" data-tchmi-height="100" data-tchmi-height-unit="px" data-tchmi-left="20" data-tchmi-left-unit="px" data-tchmi-top="79" data-tchmi-top-unit="px" data-tchmi-width="25.2" data-tchmi-width-unit="%" data-tchmi-height-mode="Content" data-tchmi-is-enabled="true" data-tchmi-cell-wrap="true">
<script data-tchmi-target-attribute="data-tchmi-column-options" type="application/json">
[
  {
    "width": 1.0,
    "widthUnit": "factor",
    "widthMode": "Value",
    "maxWidthUnit": "px",
    "minWidth": 320.0,
    "minWidthUnit": "px",
    "overflow": false
  }
]
</script>>https://datastudio.google.com/reporting/b0eb9c54-0b08-467a-9e52-60cd3b5e53c4/page/uFr0C/edit
<div id="TcHmiTextblock_174" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="32" data-tchmi-left-unit="px" data-tchmi-text="%l%L_Events%/l%" data-tchmi-top="8" data-tchmi-top-unit="px" data-tchmi-width="150" data-tchmi-width-unit="px" data-tchmi-word-wrap="true" data-tchmi-text-vertical-alignment="Center" data-tchmi-text-horizontal-alignment="Center" data-tchmi-text-font-size="30">
</div>
<div id="TcHmiToggleButton" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiToggleButton" data-tchmi-height="50" data-tchmi-height-unit="px" data-tchmi-left="54" data-tchmi-left-unit="px" data-tchmi-text="%l%L_Pending_Alarms%/l%" data-tchmi-top="64" data-tchmi-top-unit="px" data-tchmi-width="100" data-tchmi-width-unit="px" data-tchmi-word-wrap="true" data-tchmi-toggle-group="EventFilterButtons">

<script data-tchmi-target-attribute="data-tchmi-text-color" type="application/json">
{
  "color": "rgba(0, 0, 0, 1)"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-trigger" type="application/json">
[
  {
    "event": "TcHmiToggleButton.onStatePressed",
    "actions": [
      {
        "objectType": "WriteToSymbol",
        "active": true,
        "symbolExpression": "%ctrl%TcHmiEventGrid::Filter%/ctrl%",
        "value": {
          "objectType": "StaticValue",
          "valueType": "tchmi:server#/definitions/eventFilter",
          "value": [
            {
              "path": "domain",
              "comparator": "==",
              "value": "TcHmiEventLogger"
            },
            {
              "logic": "AND"
            },
            {
              "path": "severity",
              "comparator": "==",
              "value": 3
            },
            {
              "logic": "AND"
            },
            {
              "path": "alarmState",
              "comparator": "<",
              "value": 2
            }
          ]
        },
        "asyncWait": true
      }
    ]
  }
]
</script>
</div>
<div id="TcHmiToggeButton_1" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiToggleButton" data-tchmi-height="50" data-tchmi-height-unit="px" data-tchmi-left="54" data-tchmi-left-unit="px" data-tchmi-text="%l%L_Alarms%/l%" data-tchmi-top="130" data-tchmi-top-unit="px" data-tchmi-width="100" data-tchmi-width-unit="px" data-tchmi-word-wrap="true" data-tchmi-toggle-group="EventFilterButtons">
<script data-tchmi-target-attribute="data-tchmi-text-color" type="application/json">
{
  "color": "rgba(0, 0, 0, 1)"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-trigger" type="application/json">
[
  {
    "event": "TcHmiToggeButton_1.onPressed",
    "actions": [
      {
        "objectType": "WriteToSymbol",
        "active": true,
        "symbolExpression": "%ctrl%TcHmiEventGrid::Filter%/ctrl%",
        "value": {
          "objectType": "StaticValue",
          "valueType": "tchmi:server#/definitions/eventFilter",
          "value": [
            {
              "path": "domain",
              "comparator": "==",
              "value": "TcHmiEventLogger"
            },
            {
              "logic": "AND"
            },
            {
              "path": "severity",
              "comparator": "==",
              "value": 3
            }
          ]
        },
        "asyncWait": true
      }
    ]
  }
]
</script>
</div>
<div id="TcHmiToggLeButton_2" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiToggleButton" data-tchmi-height="50" data-tchmi-height-unit="px" data-tchmi-left="54" data-tchmi-left-unit="px" data-tchmi-text="%l%L_Warnings%/l%" data-tchmi-top="196" data-tchmi-top-unit="px" data-tchmi-width="100" data-tchmi-width-unit="px" data-tchmi-word-wrap="true" data-tchmi-toggle-group="EventFilterButtons">
<script data-tchmi-target-attribute="data-tchmi-text-color" type="application/json">
{
  "color": "rgba(0, 0, 0, 1)"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-trigger" type="application/json">
[
  {
    "event": "TcHmiToggLeButton_2.onStatePressed",
    "actions": [
      {
        "objectType": "WriteToSymbol",
        "active": true,
        "symbolExpression": "%ctrl%TcHmiEventGrid::Filter%/ctrl%",
        "value": {
          "objectType": "StaticValue",
          "valueType": "tchmi:server#/definitions/eventFilter",
          "value": [
            {
              "path": "domain",
              "comparator": "==",
              "value": "TcHmiEventLogger"
            },
            {
              "logic": "AND"
            },
            {
              "path": "severity",
              "comparator": "==",
              "value": 2
            }
          ]
        },
        "asyncWait": true
      }
    ]
  }
]
</script>
</div>
<div id="TcHmiToggLeButton_3" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiToggleButton" data-tchmi-height="50" data-tchmi-height-unit="px" data-tchmi-left="54" data-tchmi-left-unit="px" data-tchmi-text="%l%L_Information%/l%" data-tchmi-top="262" data-tchmi-top-unit="px" data-tchmi-width="100" data-tchmi-width-unit="px" data-tchmi-word-wrap="true" data-tchmi-toggle-group="EventFilterButtons">
<script data-tchmi-target-attribute="data-tchmi-text-color" type="application/json">
{
  "color": "rgba(0, 0, 0, 1)"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-trigger" type="application/json">
[
  {
    "event": "TcHmiToggLeButton_3.onStatePressed",
    "actions": [
      {
        "objectType": "WriteToSymbol",
        "active": true,
        "symbolExpression": "%ctrl%TcHmiEventGrid::Filter%/ctrl%",
        "value": {
          "objectType": "StaticValue",
          "valueType": "tchmi:server#/definitions/eventFilter",
          "value": [
            {
              "path": "domain",
              "comparator": "==",
              "value": "TcHmiEventLogger"
            },
            {
              "logic": "AND"
            },
            {
              "path": "severity",
              "comparator": "==",
              "value": 1
            }
          ]
        },
        "asyncWait": true
      }
    ]
  }
]
</script>
</div>
<div id="TcHmiToggLeButton_4" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiToggleButton" data-tchmi-height="50" data-tchmi-height-unit="px" data-tchmi-left="54" data-tchmi-left-unit="px" data-tchmi-text="%l%L_All_Events%/l%" data-tchmi-top="328" data-tchmi-top-unit="px" data-tchmi-width="100" data-tchmi-width-unit="px" data-tchmi-word-wrap="true" data-tchmi-toggle-group="EventFilterButtons">
<script data-tchmi-target-attribute="data-tchmi-text-color" type="application/json">
{
  "color": "rgba(0, 0, 0, 1)"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-trigger" type="application/json">
[
  {
    "event": "TcHmiToggLeButton_4.onStatePressed",
    "actions": [
      {
        "objectType": "WriteToSymbol",
        "active": true,
        "symbolExpression": "%ctrl%TcHmiEventGrid::Filter%/ctrl%",
        "value": {
          "objectType": "StaticValue",
          "valueType": "tchmi:server#/definitions/eventFilter",
          "value": [
            {
              "path": "domain",
              "comparator": "==",
              "value": "TcHmiEventLogger"
            }
          ]
        },
        "asyncWait": true
      }
    ]
  }
]
</script>
</div>
<div data-tchmi-grid-row-index="0" data-tchmi-grid-column-index="0" id="ETcHmiButton_89" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiButton" data-tchmi-height="50" data-tchmi-height-unit="px" data-tchmi-left="56" data-tchmi-left-unit="px" data-tchmi-text="Export all events" data-tchmi-top="402" data-tchmi-top-unit="px" data-tchmi-width="100" data-tchmi-width-unit="px" data-tchmi-word-wrap="true" data-tchmi-state-symbol="%s%PLC1.P_EventLogger.bExportLoggedEvents%/s%">
<script data-tchmi-target-attribute="data-tchmi-text-color" type="application/json">
{
  "color": "rgba(0, 0, 0, 1)"
}
</script>


</div>
<div data-tchmi-grid-row-index="0" data-tchmi-grid-column-index="0" id="TcHmiButton_90" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiButton" data-tchmi-height="50" data-tchmi-height-unit="px" data-tchmi-left="56" data-tchmi-left-unit="px" data-tchmi-text="Delete all events" data-tchmi-top="472" data-tchmi-top-unit="px" data-tchmi-width="100" data-tchmi-width-unit="px" data-tchmi-word-wrap="true" data-tchmi-state-symbol="%s%PLC1.P_EventLogger.bClearLoggedEvents%/s%">
<script data-tchmi-target-attribute="data-tchmi-text-color" type="application/json">
{
  "color": "rgba(0, 0, 0, 1)"
}
</script>


</div>
<div data-tchmi-grid-row-index="0" data-tchmi-grid-column-index="0" id="TcHmiButton_91" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiButton" data-tchmi-height="50" data-tchmi-height-unit="px" data-tchmi-left="56" data-tchmi-left-unit="px" data-tchmi-text="Confirm all alarms" data-tchmi-top="538" data-tchmi-top-unit="px" data-tchmi-width="100" data-tchmi-width-unit="px" data-tchmi-word-wrap="true" data-tchmi-state-symbol="%s%PLC1.P_EventLogger.bConfirmAlarms|Interval=50%/s%">
<script data-tchmi-target-attribute="data-tchmi-text-color" type="application/json">
{
  "color": "rgba(0, 0, 0, 1)"
}
</script>
</div>
</div>
<div data-tchmi-grid-row-index="0" data-tchmi-grid-column-index="0" id="TcHmiTextblock_Settings_14" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="32" data-tchmi-height-unit="px" data-tchmi-left="52" data-tchmi-left-unit="px" data-tchmi-text="Alarms, Warnings, Informational Messages" data-tchmi-top="34" data-tchmi-top-unit="px" data-tchmi-width-unit="px" data-tchmi-word-wrap="True" data-tchmi-right="16" data-tchmi-text-horizontal-alignment="Center" data-tchmi-text-vertical-alignment="Center">
<script data-tchmi-target-attribute="data-tchmi-class-names" type="application/json">
      [
      "headline-2"
      ]
    </script>
  </div>
<div data-tchmi-grid-row-index="0" data-tchmi-grid-column-index="0" id="TcHmiCombobox_2" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiCombobox" data-tchmi-combobox-text="%l%L_Language%/l%" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="721" data-tchmi-left-unit="px" data-tchmi-top="629" data-tchmi-top-unit="px" data-tchmi-width="88" data-tchmi-width-unit="px" data-tchmi-src-data="%f%GetRegisteredLocales()%/f%" data-tchmi-is-enabled="true" data-tchmi-ignore-escape-sequences="false">
<script data-tchmi-target-attribute="data-tchmi-content-padding" type="application/json">
{
  "top": 3,
  "right": 3,
  "bottom": 3,
  "left": 3
}
</script>




<script data-tchmi-target-attribute="data-tchmi-trigger" type="application/json">[
  {
    "event": "TcHmiCombobox_2.onSelectionChanged",
    "actions": [
      {
        "objectType": "Condition",
        "active": true,
        "asyncWait": true,
        "parts": [
          {
            "if": [
              {
                "compare1": {
                  "objectType": "Symbol",
                  "symbolExpression": "%ctrl%TcHmiCombobox::SelectedIndex%/ctrl%"
                },
                "compare2": {
                  "objectType": "StaticValue",
                  "valueType": "tchmi:general#/definitions/UDINT",
                  "value": 0
                },
                "compareOperator": "==",
                "logic": null
              }
            ],
            "then": [
              {
                "objectType": "Function",
                "active": true,
                "fn": "SetLocale",
                "fnParams": [
                  {
                    "objectType": "StaticValue",
                    "valueType": "tchmi:general#/definitions/ProjectLocale",
                    "value": "de-DE"
                  }
                ],
                "asyncWait": true
              }
            ]
          },
          {
            "else": [
              {
                "objectType": "Function",
                "active": true,
                "fn": "SetLocale",
                "fnParams": [
                  {
                    "objectType": "StaticValue",
                    "valueType": "tchmi:general#/definitions/ProjectLocale",
                    "value": "en-US"
                  }
                ],
                "asyncWait": true
              }
            ]
          }
        ]
      }
    ]
  }
]</script>
</div>
<div data-tchmi-grid-row-index="0" data-tchmi-grid-column-index="0" id="TcHmiButton_92" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiButton" data-tchmi-height="50" data-tchmi-height-unit="px" data-tchmi-left="999" data-tchmi-left-unit="px" data-tchmi-text="Alarm Reset" data-tchmi-top="611" data-tchmi-top-unit="px" data-tchmi-width="100" data-tchmi-width-unit="px" data-tchmi-word-wrap="true" data-tchmi-text-font-size="15" data-tchmi-state-symbol="%s%PLC1.GVL_CONVEYORS.FAULT_RESET|Interval=50%/s%">
<script data-tchmi-target-attribute="data-tchmi-text-color" type="application/json">
{
  "color": "rgba(0, 0, 0, 1)"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-border-width" type="application/json">
{
  "left": 2,
  "right": 2,
  "top": 2,
  "bottom": 2,
  "leftUnit": "px",
  "rightUnit": "px",
  "topUnit": "px",
  "bottomUnit": "px"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-border-style" type="application/json">
{
  "left": "Solid",
  "right": "Solid",
  "top": "Solid",
  "bottom": "Solid"
}
</script>


</div>
<div id="TcHmiEventGrid" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiEventGrid" data-tchmi-height="522" data-tchmi-height-unit="px" data-tchmi-left="212" data-tchmi-left-unit="px" data-tchmi-show-menu-bar="false" data-tchmi-top="79" data-tchmi-top-unit="px" data-tchmi-width-unit="px" data-tchmi-width="1306" data-tchmi-is-enabled="True">
<script data-tchmi-target-attribute="data-tchmi-filter" type="application/json">
[
  {
    "path": "domain",
    "comparator": "==",
    "value": "TcHmiEventLogger"
  }
]
</script>





<script data-tchmi-target-attribute="data-tchmi-columns" type="application/json">
[
  {
    "columnName": "severity"
  },
  {
    "columnName": "alarmState"
  },
  {
    "columnName": "text",
    "width": 500,
    "widthUnit": "px"
  },
  {
    "columnName": "timeAndDateRaised",
    "width": 150
  },
  {
    "columnName": "timeAndDateConfirmed",
    "width": 150
  },
  {
    "columnName": "timeAndDateCleared",
    "width": 150
  }
]
</script>

<script data-tchmi-target-attribute="data-tchmi-trigger" type="application/json">
[
  {
    "event": "TcHmiEventGrid.onAttached",
    "actions": [
      {
        "objectType": "WriteToSymbol",
        "active": true,
        "symbolExpression": "toggleButtonEvents",
        "value": {
          "objectType": "StaticValue",
          "valueType": "tchmi:general#/definitions/String",
          "value": "Active"
        },
        "asyncWait": true
      },
      {
        "objectType": "WriteToSymbol",
        "active": true,
        "symbolExpression": "%ctrl%TcHmiEventGrid::Filter%/ctrl%",
        "value": {
          "objectType": "StaticValue",
          "valueType": "tchmi:server#/definitions/eventFilter",
          "value": [
            {
              "path": "domain",
              "comparator": "==",
              "value": "TcHmiEventLogger"
            },
            {
              "logic": "AND"
            },
            {
              "path": "severity",
              "comparator": "==",
              "value": 3
            },
            {
              "logic": "AND"
            },
            {
              "path": "alarmState",
              "comparator": "==",
              "value": 2
            }
          ]
        },
        "asyncWait": true
      }
    ]
  }
]
</script>
</div>
</div>